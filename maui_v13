import random
import os
import math
import time
from assets import Compass_points, Tiles
try:
    import keyboard
except ModuleNotFoundError:
    print("Please wait while the keyboard module installs.\n")
    os.system('cmd /c "pip install keyboard"')
    import keyboard


NUM_COLS = NUM_ROWS = 5
TURNS_TILL_FISH_LOSS = 2
CARDINAL_DIRECTION = random.choice(("North", "South", "East", "West"))
number_of_fish = 15
number_moves = 0
row, col = 0, 0

RADIUS_OF_CIRCLE = random.randint(35, 40)
x = random.randint(0, RADIUS_OF_CIRCLE)
y = RADIUS_OF_CIRCLE - x
x *= random.choice((-1, 1))
y *= random.choice((-1, 1))


def pretty_print_board():
    """Takes a board from an array of letters and prints a grid of tiles"""
    os.system("cls" if os.name == "nt" else "clear")
    print(f"You have {number_of_fish} fish left." if number_of_fish > 0
          else "You starved to death.")
    Δx = x - col
    Δy = -y + row

    θ = math.degrees(math.atan2(Δy, Δx)) % 360
    chosen_compass = Compass_points.choose_compass_point(θ).splitlines()

    number_of_lines = 0
    for test in board:
        # combine each line in the ascii tiles together into tuples
        # Then print the unpacked version of each line to prettify them
        for pretty_row in zip(*[Tiles.FISH_TILE if tile == 'f' else
                                Tiles.STORM_TILE if tile == 's' else
                                Tiles.BOAT_TILE if tile == 'b' else
                                Tiles.NORTH_ISLAND if tile == 'n' else
                                Tiles.BLANK_TILE for tile in test]):
            try:
                print(*pretty_row, chosen_compass[number_of_lines])
                number_of_lines += 1
            except IndexError:
                print(*pretty_row)


def add_tile(tile_type, number_to_place):
    """Adds the specified tile to the map in a location that is blank

    Args:
        tile_type (string): The type of tile to add
        number_to_place (int): The number of tiles to add to the board
    """
    # Put fish tiles on the board
    type_left_to_place = number_to_place

    while type_left_to_place:
        # Get random square
        selected_row = random.randint(0, NUM_ROWS - 1)
        selected_column = random.randint(0, NUM_COLS - 1)

        if board[selected_row][selected_column] == ' ':
            board[selected_row][selected_column] = tile_type
            type_left_to_place -= 1


def get_coords():
    for row_index, row in enumerate(board):
        for col_index, tile in enumerate(row):
            if tile == 'b':
                return row_index, col_index


def new_board(n_fish=3, n_storms=10, add_island=False, boat_coords=(0, 0)):
    """Create a new random board with the boat at the chosen coords"""
    global board
    # Replace the board with a blank one
    board = [[' ' for col in range(NUM_COLS)] for row in range(NUM_ROWS)]

    row, col = boat_coords
    board[row][col] = 'b'


    # Add the North Island to the board if the user is close enough.
    add_tile('n', add_island)

    # Add fish to the board
    add_tile('f', n_fish)

    # Add storms to the board
    add_tile('s', n_storms)

    os.system("cls" if os.name == "nt" else "clear")
    pretty_print_board()


def move(key_press):
    """Record the users keypresses."""
    global key
    key = str(key_press)[14:-6].lower()


# Print Rules
RULES = """\
            ___---*** Maui's Adventure ***---___

Rules:
    - Keys:
        - Type one of W, A, S, or D or the arrow keys to move the boat
        - W/↑: Move the player up one tile.
        - A/←: Move the player one tile to the left.
        - S/↓: Move the player down on tile.
        - D/→: Move the player one to the right.

        - H: Prints the game rules

    You start with 15 fish, every second move you lose 1 fish,
    if you reach 0 fish you lose/starve to death.

    If you try to move off the board you will warp to the opposite
    side of the board.

    - Tiles:
        - Boat: The "Boat Tile" reflects the position of the player.

        - Fish: Moving onto a "Fish Tile" gains you 1-3 fish.

        - Storm: Moving onto a "Storm Tile" costs you 1-3 fish.

        - Blank: Moving onto a "Blank Tile" has no effect.


"""


print(RULES)
input("Press Enter to Start the game")
os.system("cls" if os.name == "nt" else "clear")

print(f"""To the {CARDINAL_DIRECTION} lies the heart of the sea,
there you must find Hui Te Ananui-a-Tangaroa, The Home of Tangaroa.
You will cross treacherous seas and learn the legend of Te Ika-a-Maui.""")
input("Press enter to continue")


os.system("cls" if os.name == "nt" else "clear")

# Create the board and then print it.
new_board()


keyboard.on_press(move)
VALID_KEYS = ('w', 'up', 'a', 'left', 's', 'down', 'd', 'right', 'h')

board_row = board_col = old_row = old_col = 0

while number_of_fish > 0:
    # Reset the key that was pressed
    key = None
    time.sleep(0.01)

    if key in VALID_KEYS:
        os.system("cls" if os.name == "nt" else "clear")
        if key in ('w', 'up'):
            row -= 1

        elif key in ('s', 'down'):
            row += 1

        elif key in ('a', 'left'):
            col -= 1

        elif key in ('d', 'right'):
            col += 1

        if key == 'h':
            print(RULES)
            input()
        else:

            if number_moves % TURNS_TILL_FISH_LOSS:
                number_of_fish -= 1

            number_moves += 1

            # Remove the boat tile
            board[board_row][board_col] = ' '

            # Record the Prevoius position
            old_row, old_col = board_row, board_col

            # Get the pos on the board
            board_row, board_col = row % (NUM_ROWS), col % (NUM_COLS)
            # Record the value of the moved to square
            value_of_moved_to_square = board[board_row][board_col]
            print(value_of_moved_to_square)

            # Place the boat at new coords
            board[board_row][board_col] = 'b'

            # If the user moves of the board refresh it
            # And put them at the right location
            if any((board_row == NUM_ROWS - 1 and old_row == 0,
                    old_row == NUM_ROWS - 1 and board_row == 0,
                    board_col == NUM_COLS - 1 and old_col == 0,
                    old_col == NUM_COLS - 1 and board_col == 0)):

                found_island = all((y - 5 < row < y + 5,
                                    x - 5 < col < x + 5))

                if found_island:
                    for row_num, line in enumerate(board):
                        for col_num, item in enumerate(line):
                            if item == 'n':
                                # boat pos + distance from boat to island
                                x = col + (col_num - board_col)
                                y = row + (row_num - board_row)
                                break

                new_board(boat_coords=(board_row, board_col),
                          add_island=found_island)
            else:
                if value_of_moved_to_square == 'f':
                    number_of_fish += random.randint(1, 3)

                elif value_of_moved_to_square == 's':
                    number_of_fish -= random.randint(1, 3)
                    add_tile('s', 1)

                elif value_of_moved_to_square == 'n':
                    os.system("cls" if os.name == "nt" else "clear")
                    print("You Won!!")
                    break

                pretty_print_board()

    else:
        pass
